--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -109,7 +109,7 @@
     protected static final DataParameter<NBTTagCompound> LEFT_SHOULDER_ENTITY = EntityDataManager.<NBTTagCompound>createKey(EntityPlayer.class, DataSerializers.COMPOUND_TAG);
     protected static final DataParameter<NBTTagCompound> RIGHT_SHOULDER_ENTITY = EntityDataManager.<NBTTagCompound>createKey(EntityPlayer.class, DataSerializers.COMPOUND_TAG);
     public InventoryPlayer inventory = new InventoryPlayer(this);
-    protected InventoryEnderChest enderChest = new InventoryEnderChest();
+    protected InventoryEnderChest enderChest = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor ///Lava-test - TODO revert and add a field and st uff in constructor
     public Container inventoryContainer;
     public Container openContainer;
     protected FoodStats foodStats = new FoodStats();
@@ -123,9 +123,9 @@
     public double chasingPosX;
     public double chasingPosY;
     public double chasingPosZ;
-    protected boolean sleeping;
+    public boolean sleeping; //Craftbukkit - protected -> public
     public BlockPos bedLocation;
-    private int sleepTimer;
+    public int sleepTimer; //Craftbukkit - private -> public
     public float renderOffsetX;
     @SideOnly(Side.CLIENT)
     public float renderOffsetY;
@@ -147,6 +147,12 @@
     @Nullable
     public EntityFishHook fishEntity;
 
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public String spawnWorld = "";
+    public int oldLevel = -1;
+    // CraftBukkit end
+
     protected CooldownTracker createCooldownTracker()
     {
         return new CooldownTracker();
@@ -162,6 +168,7 @@
         BlockPos blockpos = worldIn.getSpawnPoint();
         this.setLocationAndAngles((double)blockpos.getX() + 0.5D, (double)(blockpos.getY() + 1), (double)blockpos.getZ() + 0.5D, 0.0F, 0.0F);
         this.unused180 = 180.0F;
+        this.foodStats.player = this; //Lava - temporal workaround until AppleCore issue won't be finally resolved
     }
 
     protected void applyEntityAttributes()
@@ -408,7 +415,7 @@
         return SoundCategory.PLAYERS;
     }
 
-    protected int getFireImmuneTicks()
+    public int getFireImmuneTicks() //Craftbukkit - protected -> public
     {
         return 20;
     }
@@ -499,7 +506,10 @@
         {
             if (this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 == 0)
             {
-                this.heal(1.0F);
+                // CraftBukkit start - added regain reason of "REGEN" for filtering purposes.
+                //this.heal(1.0F);
+                this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
+                //Craftbukkit end
             }
 
             if (this.foodStats.needFood() && this.ticksExisted % 10 == 0)
@@ -528,6 +538,7 @@
         this.setAIMoveSpeed((float)iattributeinstance.getAttributeValue());
         float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
         float f1 = (float)(Math.atan(-this.motionY * 0.20000000298023224D) * 15.0D);
+        //float f1 = (float)(org.bukkit.craftbukkit.TrigMath.atan(-this.motionY * 0.20000000298023224D) * 15.0D);// CraftBukkit Math.atan ???
 
         if (f > 0.1F)
         {
@@ -893,6 +904,13 @@
             this.wakeUpPlayer(true, true, false);
         }
 
+        // CraftBukkit start
+        this.spawnWorld = compound.getString("SpawnWorld");
+        if ("".equals(spawnWorld)) {
+            this.spawnWorld = this.world.getServer().getWorlds().get(0).getName();
+        }
+        // CraftBukkit end
+
         if (compound.hasKey("SpawnX", 99) && compound.hasKey("SpawnY", 99) && compound.hasKey("SpawnZ", 99))
         {
             this.spawnPos = new BlockPos(compound.getInteger("SpawnX"), compound.getInteger("SpawnY"), compound.getInteger("SpawnZ"));
@@ -987,6 +1005,7 @@
         {
             compound.setTag("ShoulderEntityRight", this.getRightShoulderEntity());
         }
+        compound.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
     }
 
     public boolean attackEntityFrom(DamageSource source, float amount)
@@ -1063,6 +1082,21 @@
         {
             return !team.isSameTeam(team1) ? true : team.getAllowFriendlyFire();
         }
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API ///Lava-test - revert and test TODO
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        /*org.bukkit.scoreboard.Team team;
+        if (other instanceof EntityPlayerMP) {
+            EntityPlayerMP thatPlayer = (EntityPlayerMP) other;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
+        if (this instanceof EntityPlayerMP) {
+            return !team.hasEntry(((EntityPlayerMP) this).getBukkitEntity().getName());
+        }
+        return !team.hasEntry(this.world.getServer().getOfflinePlayer(this.getUniqueID()).getName());*/
+        //Craftbukkit end
     }
 
     protected void damageArmor(float damage)
@@ -1317,8 +1351,17 @@
 
                         if (j > 0 && !targetEntity.isBurning())
                         {
-                            flag4 = true;
-                            targetEntity.setFire(1);
+                            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                            // flag4 = true;
+                            // targetEntity.setFire(1);
+                            org.bukkit.event.entity.EntityCombustByEntityEvent combustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), targetEntity.getBukkitEntity(), 1);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                            if (!combustEvent.isCancelled()) {
+                                flag4 = true;
+                                targetEntity.setFire(combustEvent.getDuration());
+                            }
+                            // CraftBukkit end
                         }
                     }
 
@@ -1355,6 +1398,10 @@
                                 {
                                     entitylivingbase.knockBack(this, 0.4F, (double)MathHelper.sin(this.rotationYaw * 0.017453292F), (double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
                                     entitylivingbase.attackEntityFrom(DamageSource.causePlayerDamage(this), f3);
+                                    // CraftBukkit start - Only apply knockback if the damage hits ///Lava-test - nope, move to attackEntityFrom event and knockBack event or completely remove TODO
+                                    /*if (entitylivingbase.attackEntityFrom(DamageSource.causePlayerDamage(this).sweep(), f3)) {
+                                        entitylivingbase.knockBack(this, 0.4F, (double) MathHelper.sin(this.rotationYaw * 0.017453292F), (double) (-MathHelper.cos(this.rotationYaw * 0.017453292F)));
+                                    }*/
                                 }
                             }
 
@@ -1364,11 +1411,36 @@
 
                         if (targetEntity instanceof EntityPlayerMP && targetEntity.velocityChanged)
                         {
-                            ((EntityPlayerMP)targetEntity).connection.sendPacket(new SPacketEntityVelocity(targetEntity));
+                            // CraftBukkit start - Add Velocity Event ///Lava-test - fix? idk, it was weird
+                            /*((EntityPlayerMP)targetEntity).connection.sendPacket(new SPacketEntityVelocity(targetEntity));
                             targetEntity.velocityChanged = false;
                             targetEntity.motionX = d1;
                             targetEntity.motionY = d2;
-                            targetEntity.motionZ = d3;
+                            targetEntity.motionZ = d3;*/
+                            boolean changed = false;
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) targetEntity.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = new org.bukkit.util.Vector(d1, d2, d3);
+
+                            org.bukkit.event.player.PlayerVelocityEvent event = new org.bukkit.event.player.PlayerVelocityEvent(player, velocity.clone());
+                            world.getServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled()) {
+                                changed = false;
+                            } else if (!velocity.equals(event.getVelocity())) {
+                                changed = true;
+                                d1 = event.getVelocity().getX();
+                                d2 = event.getVelocity().getY();
+                                d3 = event.getVelocity().getZ();
+                            }
+
+                            if (changed) {
+                                ((EntityPlayerMP) targetEntity).connection.sendPacket(new SPacketEntityVelocity(targetEntity));
+                                targetEntity.velocityChanged = false;
+                                targetEntity.motionX = d1;
+                                targetEntity.motionY = d2;
+                                targetEntity.motionZ = d3;
+                            }
+                            // CraftBukkit end
                         }
 
                         if (flag2)
@@ -1434,7 +1506,15 @@
 
                             if (j > 0)
                             {
-                                targetEntity.setFire(j * 4);
+                                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                                // targetEntity.setFire(j * 4);
+                                org.bukkit.event.entity.EntityCombustByEntityEvent combustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
+                                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                                if (!combustEvent.isCancelled()) {
+                                    entity.setFire(combustEvent.getDuration());
+                                }
+                                // CraftBukkit end
                             }
 
                             if (this.world instanceof WorldServer && f5 > 2.0F)
@@ -1454,6 +1534,11 @@
                         {
                             targetEntity.extinguish();
                         }
+                        // CraftBukkit start - resync on cancelled event ///Lava-test - ??? TODO
+                        /*if (this instanceof EntityPlayerMP) {
+                            ((EntityPlayerMP) this).getBukkitEntity().updateInventory();
+                        }*/
+                        // CraftBukkit end
                     }
                 }
             }
@@ -1572,6 +1657,20 @@
             this.dismountRidingEntity();
         }
 
+        // CraftBukkit start - fire PlayerBedEnterEvent ///Lava-test - TODO? move to forge
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed = this.world.getWorld().getBlockAt(bedLocation.getX(), bedLocation.getY(), bedLocation.getZ());
+
+            org.bukkit.event.player.PlayerBedEnterEvent event = new org.bukkit.event.player.PlayerBedEnterEvent(player, bed);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return SleepResult.OTHER_PROBLEM;
+            }
+        }
+        // CraftBukkit end
+
         this.spawnShoulderEntities();
         this.setSize(0.2F, 0.2F);
 
@@ -1651,6 +1750,23 @@
             this.world.updateAllPlayersSleepingFlag();
         }
 
+        // CraftBukkit start - fire PlayerBedLeaveEvent ///Lava-test - TODO move to forge?
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
+
+            org.bukkit.block.Block bed;
+            BlockPos blockposition = this.bedLocation;
+            if (blockposition != null) {
+                bed = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+            } else {
+                bed = this.world.getWorld().getBlockAt(player.getLocation());
+            }
+
+            org.bukkit.event.player.PlayerBedLeaveEvent event = new org.bukkit.event.player.PlayerBedLeaveEvent(player, bed);
+            this.world.getServer().getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
+
         this.sleepTimer = immediately ? 0 : 100;
 
         if (setSpawn)
@@ -1757,11 +1873,13 @@
         {
             this.spawnPos = pos;
             this.spawnForced = forced;
+            this.spawnWorld = this.world.worldInfo.getWorldName(); // CraftBukkit
         }
         else
         {
             this.spawnPos = null;
             this.spawnForced = false;
+            this.spawnWorld = ""; // CraftBukkit
         }
     }
 
@@ -1820,7 +1938,12 @@
             this.motionY = d3 * 0.6D;
             this.jumpMovementFactor = f;
             this.fallDistance = 0.0F;
-            this.setFlag(7, false);
+            // CraftBukkit start
+            // this.setFlag(7, false);
+            if (getFlag(7) && !org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+                this.setFlag(7, false);
+            }
+            // CraftBukkit end
         }
         else
         {
@@ -2225,10 +2348,18 @@
 
     protected void spawnShoulderEntities()
     {
-        this.spawnShoulderEntity(this.getLeftShoulderEntity());
-        this.setLeftShoulderEntity(new NBTTagCompound());
-        this.spawnShoulderEntity(this.getRightShoulderEntity());
-        this.setRightShoulderEntity(new NBTTagCompound());
+        //Craftbukkit start - move to CB version
+        // this.spawnShoulderEntity(this.getLeftShoulderEntity());
+        // this.setLeftShoulderEntity(new NBTTagCompound());
+        // this.spawnShoulderEntity(this.getRightShoulderEntity());
+        // this.setRightShoulderEntity(new NBTTagCompound());
+        if (this.spawnShoulderEntity_CB(this.getLeftShoulderEntity())) {
+            this.setLeftShoulderEntity(new NBTTagCompound());
+        }
+        if (this.spawnShoulderEntity_CB(this.getRightShoulderEntity())) {
+            this.setRightShoulderEntity(new NBTTagCompound());
+        }
+        //Craftbukkit end
     }
 
     private void spawnShoulderEntity(@Nullable NBTTagCompound p_192026_1_)
@@ -2247,6 +2378,22 @@
         }
     }
 
+    // CraftBukkit method
+    private boolean spawnShoulderEntity_CB(@Nullable NBTTagCompound p_192026_1_)
+    {
+        if (!this.world.isRemote && !p_192026_1_.hasNoTags()) {
+            Entity entity = EntityList.createEntityFromNBT(p_192026_1_, this.world);
+
+            if (entity instanceof EntityTameable) {
+                ((EntityTameable) entity).setOwnerId(this.entityUniqueID);
+            }
+
+            entity.setPosition(this.posX, this.posY + 0.699999988079071D, this.posZ);
+            return this.world.spawnEntity(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY);
+        }
+        return true;
+    }
+
     @SideOnly(Side.CLIENT)
     public boolean isInvisibleToPlayer(EntityPlayer player)
     {
@@ -2481,7 +2628,7 @@
         return (NBTTagCompound)this.dataManager.get(LEFT_SHOULDER_ENTITY);
     }
 
-    protected void setLeftShoulderEntity(NBTTagCompound tag)
+    public void setLeftShoulderEntity(NBTTagCompound tag) //Craftbukkit - protected -> public
     {
         this.dataManager.set(LEFT_SHOULDER_ENTITY, tag);
     }
@@ -2491,7 +2638,7 @@
         return (NBTTagCompound)this.dataManager.get(RIGHT_SHOULDER_ENTITY);
     }
 
-    protected void setRightShoulderEntity(NBTTagCompound tag)
+    public void setRightShoulderEntity(NBTTagCompound tag) //Craftbukkit - protected -> public
     {
         this.dataManager.set(RIGHT_SHOULDER_ENTITY, tag);
     }
@@ -2763,4 +2910,10 @@
         OTHER_PROBLEM,
         NOT_SAFE;
     }
+
+    // CraftBukkit method
+    @Override
+    public org.bukkit.craftbukkit.entity.CraftHumanEntity getBukkitEntity() {
+        return (org.bukkit.craftbukkit.entity.CraftHumanEntity) super.getBukkitEntity();
+    }
 }
