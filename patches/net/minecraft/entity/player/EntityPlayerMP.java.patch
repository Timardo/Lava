--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
@@ -117,13 +117,13 @@
 public class EntityPlayerMP extends EntityPlayer implements IContainerListener
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private String language = "en_US";
+    public String language = "en_us"; // CraftBukkit - lowercase (US -> us) ///Lava-test - TODO test
     public NetHandlerPlayServer connection;
     public final MinecraftServer mcServer;
     public final PlayerInteractionManager interactionManager;
     public double managedPosX;
     public double managedPosZ;
-    private final List<Integer> entityRemoveQueue = Lists.<Integer>newLinkedList();
+    public final List<Integer> entityRemoveQueue = Lists.<Integer>newLinkedList(); //Craftbukkit - private -> public
     private final PlayerAdvancements advancements;
     private final StatisticsManagerServer statsFile;
     private float lastHealthScore = Float.MIN_VALUE;
@@ -135,13 +135,13 @@
     private float lastHealth = -1.0E8F;
     private int lastFoodLevel = -99999999;
     private boolean wasHungry = true;
-    private int lastExperience = -99999999;
-    private int respawnInvulnerabilityTicks = 60;
+    public int lastExperience = -99999999; //Craftbukkit - private -> public
+    public int respawnInvulnerabilityTicks = 60; //Craftbukkit - private -> public
     private EntityPlayer.EnumChatVisibility chatVisibility;
     private boolean chatColours = true;
     private long playerLastActiveTime = System.currentTimeMillis();
     private Entity spectatingEntity;
-    private boolean invulnerableDimensionChange;
+    public boolean invulnerableDimensionChange; //Craftbukkit - private -> public
     private boolean seenCredits;
     private final RecipeBookServer recipeBook = new RecipeBookServer();
     private Vec3d levitationStartPos;
@@ -188,6 +188,12 @@
         {
             this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
         }
+
+        //Craftbukkit start
+        this.displayName = this.getName();
+        this.thisisatest = true;
+        this.maxHealthCache = this.getMaxHealth();
+        //Craftbukkit end
     }
 
     public void readEntityFromNBT(NBTTagCompound compound)
@@ -218,6 +224,7 @@
         {
             this.recipeBook.read(compound.getCompoundTag("recipeBook"));
         }
+        this.getBukkitEntity().readExtraData(compound); // CraftBukkit
     }
 
     public static void registerFixesPlayerMP(DataFixer p_191522_0_)
@@ -270,6 +277,7 @@
         }
 
         compound.setTag("recipeBook", this.recipeBook.write());
+        this.getBukkitEntity().setExtraData(compound); // CraftBukkit
     }
 
     public void addExperienceLevel(int levels)
@@ -313,6 +321,11 @@
 
     public void onUpdate()
     {
+        // CraftBukkit start - used in isDisconnected method
+        if (this.joining) {
+            this.joining = false;
+        }
+        // CraftBukkit end
         this.interactionManager.updateBlockRemoving();
         --this.respawnInvulnerabilityTicks;
 
@@ -398,7 +411,10 @@
 
             if (this.getHealth() != this.lastHealth || this.lastFoodLevel != this.foodStats.getFoodLevel() || this.foodStats.getSaturationLevel() == 0.0F != this.wasHungry)
             {
-                this.connection.sendPacket(new SPacketUpdateHealth(this.getHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
+                //Craftbukkit start - send scaled health
+                //this.connection.sendPacket(new SPacketUpdateHealth(this.getHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
+                this.connection.sendPacket(new SPacketUpdateHealth(this.getBukkitEntity().getScaledHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
+                //Craftbukkit end
                 this.lastHealth = this.getHealth();
                 this.lastFoodLevel = this.foodStats.getFoodLevel();
                 this.wasHungry = this.foodStats.getSaturationLevel() == 0.0F;
@@ -422,6 +438,12 @@
                 this.updateScorePoints(IScoreCriteria.AIR, MathHelper.ceil((float)this.lastAirScore));
             }
 
+            // CraftBukkit start - Force max health updates
+            if (this.maxHealthCache != this.getMaxHealth()) {
+                this.getBukkitEntity().updateScaledHealth();
+            }
+            // CraftBukkit end
+
             if (this.getTotalArmorValue() != this.lastArmorScore)
             {
                 this.lastArmorScore = this.getTotalArmorValue();
@@ -450,6 +472,16 @@
             {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
+            // CraftBukkit start - initialize oldLevel and fire PlayerLevelChangeEvent
+            if (this.oldLevel == -1) {
+                this.oldLevel = this.experienceLevel;
+            }
+
+            if (this.oldLevel != this.experienceLevel) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer(this), this.oldLevel, this.experienceLevel);
+                this.oldLevel = this.experienceLevel;
+            }
+            // CraftBukkit end
         }
         catch (Throwable throwable)
         {
@@ -462,11 +494,14 @@
 
     private void updateScorePoints(IScoreCriteria criteria, int points)
     {
-        for (ScoreObjective scoreobjective : this.getWorldScoreboard().getObjectivesFromCriteria(criteria))
+        //Craftbukkit start - use CB scores ///Lava-test - TODO is this really needed?
+        //for (ScoreObjective scoreobjective : this.getWorldScoreboard().getObjectivesFromCriteria(criteria))
+        for (Score score : this.world.getServer().getScoreboardManager().getScoreboardScores(criteria, this.getName(), new java.util.ArrayList<Score>()))
         {
-            Score score = this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective);
+            // Score score = this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective);
             score.setScorePoints(points);
         }
+        //Craftbukkit end
     }
 
     public void onDeath(DamageSource cause)
@@ -474,11 +509,11 @@
         if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, cause)) return;
         boolean flag = this.world.getGameRules().getBoolean("showDeathMessages");
         this.connection.sendPacket(new SPacketCombatEvent(this.getCombatTracker(), SPacketCombatEvent.Event.ENTITY_DIED, flag));
-
-        if (flag)
+        
+        if (flag && !org.lavapowered.lava.events.LavaEventHandler.waitForDropEvent) //Lava-test - add boolean to properly implement death event
         {
             Team team = this.getTeam();
-
+            
             if (team != null && team.getDeathMessageVisibility() != Team.EnumVisible.ALWAYS)
             {
                 if (team.getDeathMessageVisibility() == Team.EnumVisible.HIDE_FOR_OTHER_TEAMS)
@@ -492,7 +527,7 @@
             }
             else
             {
-                this.mcServer.getPlayerList().sendMessage(this.getCombatTracker().getDeathMessage());
+                this.mcServer.getPlayerList().sendMessage(org.lavapowered.lava.events.LavaEventHandler.chatMessage);
             }
         }
 
@@ -516,9 +551,17 @@
             }
         }
 
-        for (ScoreObjective scoreobjective : this.world.getScoreboard().getObjectivesFromCriteria(IScoreCriteria.DEATH_COUNT))
+        //Craftbukkit start - ??
+        this.closeScreen();
+        this.setSpectatingEntity(this);
+
+        // CraftBukkit - Get our scores instead ///Lava-test - TODO prob revert
+        //for (ScoreObjective scoreobjective : this.world.getScoreboard().getObjectivesFromCriteria(IScoreCriteria.DEATH_COUNT))
+        Collection<Score> collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.DEATH_COUNT, this.getName(), new java.util.ArrayList<Score>());
+        for (Score score : collection)
         {
-            Score score = this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective);
+            // Score score = this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective);
+            //Craftbukkit end
             score.incrementScore();
         }
 
@@ -549,23 +592,31 @@
         {
             super.awardKillScore(p_191956_1_, p_191956_2_, p_191956_3_);
             this.addScore(p_191956_2_);
-            Collection<ScoreObjective> collection = this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.TOTAL_KILL_COUNT);
-
+            // CraftBukkit start - Get our scores instead
+            // Collection<ScoreObjective> collection = this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.TOTAL_KILL_COUNT);
+            Collection<Score> collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.TOTAL_KILL_COUNT, this.getName(), new java.util.ArrayList<Score>());
             if (p_191956_1_ instanceof EntityPlayer)
             {
                 this.addStat(StatList.PLAYER_KILLS);
-                collection.addAll(this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.PLAYER_KILL_COUNT));
+                // CraftBukkit - Get our scores instead
+                // collection.addAll(this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.PLAYER_KILL_COUNT));
+                this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.PLAYER_KILL_COUNT, this.getName(), collection);
+                // CraftBukkit end
             }
             else
             {
                 this.addStat(StatList.MOB_KILLS);
             }
 
-            collection.addAll(this.awardTeamKillScores(p_191956_1_));
+            collection.addAll(this.awardTeamKillScores_CB(p_191956_1_)); //Craftbukkit - TODO rework
 
-            for (ScoreObjective scoreobjective : collection)
+            //Craftbukkit start - CB scores
+            //for (ScoreObjective scoreobjective : collection)
+            for (Score score : collection)
             {
-                this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective).incrementScore();
+                // this.getWorldScoreboard().getOrCreateScore(this.getName(), scoreobjective).incrementScore();
+                score.incrementScore();
+                //Craftbukkit end
             }
 
             CriteriaTriggers.PLAYER_KILLED_ENTITY.trigger(this, p_191956_1_, p_191956_3_);
@@ -654,14 +705,17 @@
 
     private boolean canPlayersAttack()
     {
-        return this.mcServer.isPVPEnabled();
+        // CraftBukkit start - this.mcServer.isPVPEnabled() -> this.world.pvpMode (for perworld pvp)
+        // return this.mcServer.isPVPEnabled();
+        return this.world.pvpMode;
+        //Craftbukkit end
     }
 
     @Nullable
     public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter)
     {
         if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, dimensionIn)) return this;
-        this.invulnerableDimensionChange = true;
+        this.invulnerableDimensionChange = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
 
         if (this.dimension == 0 && dimensionIn == -1)
         {
@@ -674,6 +728,7 @@
 
         if (this.dimension == 1 && dimensionIn == 1 && teleporter.isVanilla())
         {
+            //this.invulnerableDimensionChange = true; // CraftBukkit - Moved down from above ///Lava-test ??? TODO investigate
             this.world.removeEntity(this);
 
             if (!this.queuedEndExit)
@@ -693,6 +748,8 @@
             }
 
             this.mcServer.getPlayerList().transferPlayerToDimension(this, dimensionIn, teleporter);
+            //PlayerTeleportEvent.TeleportCause cause = (this.dimension == 1 || dimensionIn == 1) ? PlayerTeleportEvent.TeleportCause.END_PORTAL : PlayerTeleportEvent.TeleportCause.NETHER_PORTAL;
+            //this.mcServer.getPlayerList().changeDimension(this, dimensionIn, cause); // check all this ///Lava-test - TODO completely rework teleporting stuff, should fix portal gen issues
             this.connection.sendPacket(new SPacketEffect(1032, BlockPos.ORIGIN, 0, false));
             this.lastExperience = -1;
             this.lastHealth = -1.0F;
@@ -751,6 +808,7 @@
 
     public void wakeUpPlayer(boolean immediately, boolean updateWorldFlag, boolean setSpawn)
     {
+        if (!this.sleeping) return; // CraftBukkit - Can't leave bed if not in one!
         if (this.isPlayerSleeping())
         {
             this.getServerWorld().getEntityTracker().sendToTrackingAndSelf(this, new SPacketAnimation(this, 2));
@@ -848,15 +906,20 @@
     {
         this.currentWindowId = this.currentWindowId % 100 + 1;
     }
-
+    
     public void displayGui(IInteractionObject guiOwner)
     {
-        if (guiOwner instanceof ILootContainer && ((ILootContainer)guiOwner).getLootTable() != null && this.isSpectator())
+        //Lava-test - implement InventoryOpenEvent
+        /*if (guiOwner instanceof ILootContainer && ((ILootContainer) guiOwner).getLootTable() != null && this.isSpectator()) Lava-test - comment out to find potential coremod interactions
         {
             this.sendStatusMessage((new TextComponentTranslation("container.spectatorCantOpen", new Object[0])).setStyle((new Style()).setColor(TextFormatting.RED)), true);
         }
-        else
+        else*/
         {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callInventoryOpenEvent(this, guiOwner.createContainer(this.inventory, this), guiOwner instanceof ILootContainer && ((ILootContainer) guiOwner).getLootTable() != null && this.isSpectator()) == null) {
+                return;
+            }
+            //Lava-test end
             this.getNextWindowId();
             this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, guiOwner.getGuiID(), guiOwner.getDisplayName()));
             this.openContainer = guiOwner.createContainer(this.inventory, this);
@@ -887,6 +950,7 @@
                 {
                     this.connection.sendPacket(new SPacketChat(new TextComponentTranslation("container.isLocked", new Object[] {chestInventory.getDisplayName()}), ChatType.GAME_INFO));
                     this.connection.sendPacket(new SPacketSoundEffect(SoundEvents.BLOCK_CHEST_LOCKED, SoundCategory.BLOCKS, this.posX, this.posY, this.posZ, 1.0F, 1.0F));
+                    ilockablecontainer.closeInventory(this); //Craftbukkit - ??? TODO test
                     return;
                 }
             }
@@ -895,11 +959,23 @@
 
             if (chestInventory instanceof IInteractionObject)
             {
+                //Lava-test start - add event hook
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callInventoryOpenEvent(this, ((IInteractionObject)chestInventory).createContainer(this.inventory, this), ((ILockableContainer)chestInventory).isLocked() && !this.canOpen(((ILockableContainer)chestInventory).getLockCode()) && !this.isSpectator()) == null) {
+                    chestInventory.closeInventory(this); //I don't really understand why is this here
+                    return;
+                }
+                //Lava-test end
                 this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, ((IInteractionObject)chestInventory).getGuiID(), chestInventory.getDisplayName(), chestInventory.getSizeInventory()));
                 this.openContainer = ((IInteractionObject)chestInventory).createContainer(this.inventory, this);
             }
             else
             {
+                //Lava-test start - event hook
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callInventoryOpenEvent(this, new ContainerChest(this.inventory, chestInventory, this), ((ILockableContainer)chestInventory).isLocked() && !this.canOpen(((ILockableContainer)chestInventory).getLockCode()) && !this.isSpectator()) == null) {
+                    chestInventory.closeInventory(this);
+                    return;
+                }
+                //Lava-test end
                 this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, "minecraft:container", chestInventory.getDisplayName(), chestInventory.getSizeInventory()));
                 this.openContainer = new ContainerChest(this.inventory, chestInventory, this);
             }
@@ -912,6 +988,10 @@
 
     public void displayVillagerTradeGui(IMerchant villager)
     {
+        // CraftBukkit start - Inventory open hook
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callInventoryOpenEvent(this, new ContainerMerchant(this.inventory, villager, this.world)) == null) {
+            return;
+        }
         this.getNextWindowId();
         this.openContainer = new ContainerMerchant(this.inventory, villager, this.world);
         this.openContainer.windowId = this.currentWindowId;
@@ -933,6 +1013,12 @@
 
     public void openGuiHorseInventory(AbstractHorse horse, IInventory inventoryIn)
     {
+        // CraftBukkit start - Inventory open hook
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callInventoryOpenEvent(this, new ContainerHorseInventory(this.inventory, inventoryIn, horse, this)) == null) {
+            inventoryIn.closeInventory(this);
+            return;
+        }
+        // CraftBukkit end
         if (this.openContainer != this.inventoryContainer)
         {
             this.closeScreen();
@@ -988,6 +1074,11 @@
     {
         this.connection.sendPacket(new SPacketWindowItems(containerToSend.windowId, itemsList));
         this.connection.sendPacket(new SPacketSetSlot(-1, -1, this.inventory.getItemStack()));
+        // CraftBukkit start - Send a Set Slot to update the crafting result slot ///Lava-test TODO investigate more
+        if (java.util.EnumSet.of(org.bukkit.event.inventory.InventoryType.CRAFTING, org.bukkit.event.inventory.InventoryType.WORKBENCH).contains(containerToSend.getBukkitView().getType())) {
+            this.connection.sendPacket(new SPacketSetSlot(containerToSend.windowId, 0, containerToSend.getSlot(0).getStack()));
+        }
+        // CraftBukkit end
     }
 
     public void sendWindowProperty(Container containerIn, int varToUpdate, int newValue)
@@ -1005,6 +1096,7 @@
 
     public void closeScreen()
     {
+        org.bukkit.craftbukkit.event.CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
         this.connection.sendPacket(new SPacketCloseWindow(this.openContainer.windowId));
         this.closeContainer();
     }
@@ -1156,7 +1248,7 @@
         this.lastExperience = -1;
         this.lastHealth = -1.0F;
         this.lastFoodLevel = -1;
-        this.recipeBook.copyFrom(that.recipeBook);
+        this.recipeBook.copyFrom(that.recipeBook); // CraftBukkit comment out TODO find out why
         this.entityRemoveQueue.addAll(that.entityRemoveQueue);
         this.seenCredits = that.seenCredits;
         this.enteredNetherPosition = that.enteredNetherPosition;
@@ -1246,6 +1338,18 @@
 
     public void setGameType(GameType gameType)
     {
+        // CraftBukkit start - event
+        if (gameType == this.interactionManager.getGameType()) {
+            return;
+        }
+
+        org.bukkit.event.player.PlayerGameModeChangeEvent event = new org.bukkit.event.player.PlayerGameModeChangeEvent(getBukkitEntity(), org.bukkit.GameMode.getByValue(gameType.getID()));
+        world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
+
         this.interactionManager.setGameType(gameType);
         this.connection.sendPacket(new SPacketChangeGameState(3, (float)gameType.getID()));
 
@@ -1284,7 +1388,8 @@
         {
             return true;
         }
-        else if (!"tell".equals(commandName) && !"help".equals(commandName) && !"me".equals(commandName) && !"trigger".equals(commandName))
+        //Craftbukkit start - permission handling
+        /*else if (!"tell".equals(commandName) && !"help".equals(commandName) && !"me".equals(commandName) && !"trigger".equals(commandName))
         {
             if (this.mcServer.getPlayerList().canSendCommands(this.getGameProfile()))
             {
@@ -1307,7 +1412,15 @@
         else
         {
             return true;
+        }*/
+        if ("@".equals(commandName)) {
+            return getBukkitEntity().hasPermission("minecraft.command.selector");
         }
+        else if ("".equals(commandName)) {
+            return getBukkitEntity().isOp();
+        }
+        return getBukkitEntity().hasPermission("minecraft.command." + commandName);
+        // CraftBukkit end
     }
 
     public String getPlayerIP()
@@ -1320,6 +1433,17 @@
 
     public void handleClientSettings(CPacketClientSettings packetIn)
     {
+        // CraftBukkit start - event
+        if (getPrimaryHand() != packetIn.getMainHand()) {
+            org.bukkit.event.player.PlayerChangedMainHandEvent event = new org.bukkit.event.player.PlayerChangedMainHandEvent(getBukkitEntity(), getPrimaryHand() == EnumHandSide.LEFT ? org.bukkit.inventory.MainHand.LEFT : org.bukkit.inventory.MainHand.RIGHT);
+            this.mcServer.server.getPluginManager().callEvent(event);
+        }
+        if (!this.language.equals(packetIn.getLang())) {
+            org.bukkit.event.player.PlayerLocaleChangeEvent event = new org.bukkit.event.player.PlayerLocaleChangeEvent(getBukkitEntity(), packetIn.getLang());
+            this.mcServer.server.getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
+
         this.language = packetIn.getLang();
         this.chatVisibility = packetIn.getChatVisibility();
         this.chatColours = packetIn.isColorsEnabled();
@@ -1402,7 +1526,10 @@
         if (entity != this.spectatingEntity)
         {
             this.connection.sendPacket(new SPacketCamera(this.spectatingEntity));
-            this.setPositionAndUpdate(this.spectatingEntity.posX, this.spectatingEntity.posY, this.spectatingEntity.posZ);
+            //Craftbukkit start - add event handling
+            //this.setPositionAndUpdate(this.spectatingEntity.posX, this.spectatingEntity.posY, this.spectatingEntity.posZ);
+            this.connection.setPlayerLocation(this.spectatingEntity.posX, this.spectatingEntity.posY, this.spectatingEntity.posZ, this.rotationYaw, this.rotationPitch, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE);
+            //Craftbukkit end
         }
     }
 
@@ -1434,7 +1561,10 @@
     @Nullable
     public ITextComponent getTabListDisplayName()
     {
-        return null;
+        //Craftbukkit start - custom tab names handling
+        // return null;
+        return listName;
+        //Craftbukkit end
     }
 
     public void swingArm(EnumHand hand)
@@ -1455,11 +1585,19 @@
 
     public void setElytraFlying()
     {
+        // CraftBukkit start
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled())
+            return;
+        //Craftbukkit end
         this.setFlag(7, true);
     }
 
     public void clearElytraFlying()
     {
+        // CraftBukkit start
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled())
+            return;
+        //Craftbukkit end
         this.setFlag(7, true);
         this.setFlag(7, false);
     }
@@ -1474,4 +1612,259 @@
     {
         return this.enteredNetherPosition;
     }
+
+    // CraftBukkit start - CB code block (per-player weather, CB methods, fields..)
+    public long timeOffset = 0;
+    public boolean relativeTime = true;
+    private int viewDistance;
+    public String displayName;
+    public ITextComponent listName;
+    public org.bukkit.Location compassTarget;
+    public int newExp = 0;
+    public int newLevel = 0;
+    public int newTotalExp = 0;
+    public boolean keepLevel = false;
+    public double maxHealthCache;
+    public boolean joining = true;
+    public boolean sentListPacket = false;
+    public org.bukkit.WeatherType weather = null;
+    private float pluginRainPosition;
+    private float pluginRainPositionPrevious;
+    public long lastSave = MinecraftServer.currentTick; // Paper
+
+    public long getPlayerTime() {
+        if (this.relativeTime) {
+            // Adds timeOffset to the current server time.
+            return this.world.getWorldTime() + this.timeOffset;
+        } else {
+            // Adds timeOffset to the beginning of this day.
+            return this.world.getWorldTime() - (this.world.getWorldTime() % 24000) + this.timeOffset;
+        }
+    }
+    
+    public final BlockPos getSpawnPoint(MinecraftServer minecraftserver, WorldServer worldserver) {
+        BlockPos blockposition = worldserver.getSpawnPoint();
+
+        if (worldserver.provider.hasSkyLight() && worldserver.getWorldInfo().getGameType() != GameType.ADVENTURE) {
+            int i = Math.max(0, minecraftserver.getSpawnRadius(worldserver));
+            int j = MathHelper.floor(worldserver.getWorldBorder().getClosestDistance((double) blockposition.getX(), (double) blockposition.getZ()));
+
+            if (j < i) {
+                i = j;
+            }
+
+            if (j <= 1) {
+                i = 1;
+            }
+
+            blockposition = worldserver.getTopSolidOrLiquidBlock(blockposition.add(this.rand.nextInt(i * 2 + 1) - i, 0, this.rand.nextInt(i * 2 + 1) - i));
+        }
+
+        return blockposition;
+    }
+    
+    public void setWorld(net.minecraft.world.World world) {
+        super.setWorld(world);
+        
+        if (world == null) {
+            this.dead = false;
+            BlockPos position = null;
+            
+            if (this.spawnWorld != null && !this.spawnWorld.equals("")) {
+                org.bukkit.craftbukkit.CraftWorld cworld = (org.bukkit.craftbukkit.CraftWorld) org.bukkit.Bukkit.getServer().getWorld(this.spawnWorld);
+                
+                if (cworld != null && this.getBedLocation() != null) {
+                    world = cworld.getHandle();
+                    position = EntityPlayer.getBedSpawnLocation(cworld.getHandle(), this.getBedLocation(), false);
+                }
+            }
+            
+            if (world == null || position == null) {
+                world = ((org.bukkit.craftbukkit.CraftWorld) org.bukkit.Bukkit.getServer().getWorlds().get(0)).getHandle();
+                position = world.getSpawnPoint();
+            }
+            
+            this.world = world;
+            this.setPosition(position.getX() + 0.5, position.getY(), position.getZ() + 0.5);
+        }
+        
+        this.dimension = ((WorldServer) this.world).dimension;
+        this.interactionManager.setWorld((WorldServer) world);
+    }
+    
+    private Collection<Score> awardTeamKillScores_CB(Entity p_192038_1_) { //Lava-test - TODO rework with the base method
+        String s = p_192038_1_ instanceof EntityPlayer ? p_192038_1_.getName() : p_192038_1_.getCachedUniqueIdString();
+        ScorePlayerTeam scoreplayerteam = this.getWorldScoreboard().getPlayersTeam(this.getName());
+
+        if (scoreplayerteam != null) {
+            int i = scoreplayerteam.getColor().getColorIndex();
+
+            if (i >= 0 && i < IScoreCriteria.KILLED_BY_TEAM.length) {
+                for (ScoreObjective scoreobjective : this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.KILLED_BY_TEAM[i])) {
+                    Score score = this.getWorldScoreboard().getOrCreateScore(s, scoreobjective);
+                    score.incrementScore();
+                }
+            }
+        }
+
+        ScorePlayerTeam scoreplayerteam1 = this.getWorldScoreboard().getPlayersTeam(s);
+
+        if (scoreplayerteam1 != null) {
+            int j = scoreplayerteam1.getColor().getColorIndex();
+
+            if (j >= 0 && j < IScoreCriteria.TEAM_KILL.length) {
+                // CraftBukkit - Get our scores instead
+                // return this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.TEAM_KILL[j]);
+                return this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.TEAM_KILL[j], this.getName(), new java.util.ArrayList<Score>());
+                // CraftBukkit end
+            }
+        }
+
+        return Lists.<Score>newArrayList();
+    }
+    
+    public int getNextWindowIdCB() {
+        getNextWindowId();
+        return this.currentWindowId;
+    }
+    
+    public void sendMessage(ITextComponent[] ichatbasecomponent) {
+        for (ITextComponent component : ichatbasecomponent) {
+            this.sendMessage(component);
+        }
+    }
+
+    public org.bukkit.WeatherType getPlayerWeather() {
+        return this.weather;
+    }
+
+    public void setPlayerWeather(org.bukkit.WeatherType type, boolean plugin) {
+        if (!plugin && this.weather != null) {
+            return;
+        }
+
+        if (plugin) {
+            this.weather = type;
+        }
+
+        if (type == org.bukkit.WeatherType.DOWNFALL) {
+            this.connection.sendPacket(new SPacketChangeGameState(2, 0));
+        } else {
+            this.connection.sendPacket(new SPacketChangeGameState(1, 0));
+        }
+    }
+
+    public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+        if (this.weather == null) {
+            // Vanilla
+            if (oldRain != newRain) {
+                this.connection.sendPacket(new SPacketChangeGameState(7, newRain));
+            }
+        } else {
+            // Plugin
+            if (pluginRainPositionPrevious != pluginRainPosition) {
+                this.connection.sendPacket(new SPacketChangeGameState(7, pluginRainPosition));
+            }
+        }
+
+        if (oldThunder != newThunder) {
+            if (weather == org.bukkit.WeatherType.DOWNFALL || weather == null) {
+                this.connection.sendPacket(new SPacketChangeGameState(8, newThunder));
+            } else {
+                this.connection.sendPacket(new SPacketChangeGameState(8, 0));
+            }
+        }
+    }
+
+    public void tickWeather() {
+        if (this.weather == null) return;
+
+        pluginRainPositionPrevious = pluginRainPosition;
+        
+        if (weather == org.bukkit.WeatherType.DOWNFALL) {
+            pluginRainPosition += 0.01;
+        } else {
+            pluginRainPosition -= 0.01;
+        }
+
+        pluginRainPosition = MathHelper.clamp(pluginRainPosition, 0.0F, 1.0F);
+    }
+
+    public void resetPlayerWeather() {
+        this.weather = null;
+        this.setPlayerWeather(this.world.getWorldInfo().isRaining() ? org.bukkit.WeatherType.DOWNFALL : org.bukkit.WeatherType.CLEAR, false);
+    }
+
+    @Override
+    public String toString() {
+        return super.toString() + "(" + this.getName() + " at " + this.posX + "," + this.posY + "," + this.posZ + ")";
+    }
+
+    // SPIGOT-1903, MC-98153
+    public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+        this.setLocationAndAngles(x, y, z, yaw, pitch);
+        this.connection.captureCurrentPosition();
+    }
+
+    @Override
+    public boolean isMovementBlocked() {
+        return super.isMovementBlocked() || !getBukkitEntity().isOnline();
+    }
+
+    @Override
+    public net.minecraft.scoreboard.Scoreboard getWorldScoreboard() {
+        return getBukkitEntity().getScoreboard().getHandle();
+    }
+
+    public void reset() {
+        float exp = 0;
+        boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory");
+
+        if (this.keepLevel || keepInventory) {
+            exp = this.experience;
+            this.newTotalExp = this.experienceTotal;
+            this.newLevel = this.experienceLevel;
+        }
+
+        this.setHealth(this.getMaxHealth());
+        this.fire = 0;
+        this.fallDistance = 0;
+        this.foodStats = new net.minecraft.util.FoodStats();
+        this.foodStats.player = this;
+        this.experienceLevel = this.newLevel;
+        this.experienceTotal = this.newTotalExp;
+        this.experience = 0;
+        this.deathTime = 0;
+        this.setArrowCountInEntity(0);
+        this.clearActivePotions();
+        this.potionsNeedUpdate = true;
+        this.openContainer = this.inventoryContainer;
+        this.attackingPlayer = null;
+        this.revengeTarget = null;
+        this._combatTracker = new net.minecraft.util.CombatTracker(this);
+        this.lastExperience = -1;
+        
+        if (this.keepLevel || keepInventory) {
+            this.experience = exp;
+        } else {
+            this.addExperience(this.newExp);
+        }
+        
+        this.keepLevel = false;
+        getEntityData().getKeySet().removeIf(tag -> !PERSISTED_NBT_TAG.equals(tag));
+    }
+    
+    public int getViewDistance() {
+        return (this.viewDistance == -1) ? ((WorldServer) this.world).getPlayerChunkMap().getViewDistance() : this.viewDistance;
+    }
+
+    public void setViewDistance(final int viewDistance) {
+        this.viewDistance = viewDistance;
+    }
+
+    @Override
+    public org.bukkit.craftbukkit.entity.CraftPlayer getBukkitEntity() {
+        return (org.bukkit.craftbukkit.entity.CraftPlayer) super.getBukkitEntity();
+    }
+    //Craftbukkit end
 }
