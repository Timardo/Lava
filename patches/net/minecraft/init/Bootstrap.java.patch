--- ../src-base/minecraft/net/minecraft/init/Bootstrap.java
+++ ../src-work/minecraft/net/minecraft/init/Bootstrap.java
@@ -193,14 +193,42 @@
                 double d0 = source.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)(source.getBlockPos().getY() + enumfacing.getFrontOffsetY()) + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
-                Entity entity = ItemMonsterPlacer.spawnCreature(source.getWorld(), ItemMonsterPlacer.getNamedIdFrom(stack), d0, d1, d2);
+                //Lava-test start - add event
+                World world = source.getWorld();
+                ItemStack eventStack = stack.copy().splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(eventStack);
 
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
+                world.getServer().getPluginManager().callEvent(event);
+                
+                if (event.isCancelled()) return stack; //Cancelled event, don't do anything
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                d0 = event.getVelocity().getX();
+                d1 = event.getVelocity().getY();
+                d2 = event.getVelocity().getZ();
+                ItemStack stackCopy = stack; //copy the stack to avoid modifying the method below
+                stack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                //Lava-test end - TODO remove all spawnreason methods from internal code and replace them with static var
+
+                Entity entity = ItemMonsterPlacer.spawnCreature(source.getWorld(), ItemMonsterPlacer.getNamedIdFrom(stack), d0, d1, d2, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG); //Craftbukkit - add spawn reason
+
                 if (entity instanceof EntityLivingBase && stack.hasDisplayName())
                 {
                     entity.setCustomNameTag(stack.getDisplayName());
                 }
 
                 ItemMonsterPlacer.applyItemEntityDataToEntity(source.getWorld(), (EntityPlayer)null, stack, entity);
+                stack = stackCopy; //Lava-test - revert to original stack
                 stack.shrink(1);
                 return stack;
             }
@@ -213,8 +241,33 @@
                 double d0 = source.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)source.getBlockPos().getY() + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
+                //Lava-test start - add event
+                World world = source.getWorld();
+                ItemStack eventStack = stack.copy().splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(eventStack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                d0 = event.getVelocity().getX();
+                d1 = event.getVelocity().getY();
+                d2 = event.getVelocity().getZ();
+                ItemStack stackCopy = stack;
+                stack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                //Lava-test end
                 EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(source.getWorld(), d0, d1, d2, stack);
                 source.getWorld().spawnEntity(entityfireworkrocket);
+                stack = stackCopy; //Lava-test
                 stack.shrink(1);
                 return stack;
             }
@@ -237,7 +290,28 @@
                 double d3 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetX();
                 double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetY();
                 double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetZ();
-                world.spawnEntity(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
+                //Lava-test start - add event
+                ItemStack eventStack = stack.copy().splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(eventStack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                d3 = event.getVelocity().getX();
+                d4 = event.getVelocity().getY();
+                d5 = event.getVelocity().getZ();;
+                //Lava-test end
+                EntitySmallFireball fireball = new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5);
+                fireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) source.getBlockTileEntity()); //Craftbukkit - add source
                 stack.shrink(1);
                 return stack;
             }
@@ -259,7 +333,47 @@
             {
                 ItemBucket itembucket = (ItemBucket)stack.getItem();
                 BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
+                //Lava-test start add event 
+                World world = source.getWorld();
+                int x = blockpos.getX();
+                int y = blockpos.getY();
+                int z = blockpos.getZ();
+                if (world.isAirBlock(blockpos) || !world.getBlockState(blockpos).getMaterial().isSolid()) {
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                    org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+
+                    org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
+                    world.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return stack;
+                    }
+
+                    if (!event.getItem().equals(craftItem)) {
+                        // Chain to handler for new item
+                        ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                        if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                            idispensebehavior.dispense(source, eventStack);
+                            return stack;
+                        }
+                    }
+                }
+                
+                if (stack.getCount() == 1)
+                //Lava-test end
                 return itembucket.tryPlaceContainedLiquid((EntityPlayer)null, source.getWorld(), blockpos) ? new ItemStack(Items.BUCKET) : this.dispenseBehavior.dispense(source, stack);
+                // CraftBukkit start - Handle stacked buckets
+                if (itembucket.tryPlaceContainedLiquid(null, source.getWorld(), blockpos)) {
+                    stack = new ItemStack(Items.BUCKET);
+                    if (((TileEntityDispenser) source.getBlockTileEntity()).addItemStack(stack) < 0) {
+                        this.dispenseBehavior.dispense(source, stack);
+                    }
+                    return stack;
+                } else {
+                    return this.dispenseBehavior.dispense(source, stack);
+                }
+                // CraftBukkit end
             }
         };
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.LAVA_BUCKET, ibehaviordispenseitem);
@@ -316,17 +430,35 @@
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
+                //Carftbukkit start - event
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                world.getServer().getPluginManager().callEvent(event);
+                
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                //Craftbukkit end
                 this.successful = true;
                 BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
 
                 if (world.isAirBlock(blockpos))
                 {
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockpos.getX(), blockpos.getY(), blockpos.getZ(), source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ()).isCancelled()) { //Craftbukkit - event
                     world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
 
                     if (stack.attemptDamageItem(1, world.rand, (EntityPlayerMP)null))
                     {
                         stack.setCount(0);
                     }
+                    }
                 }
                 else if (world.getBlockState(blockpos).getBlock() == Blocks.TNT)
                 {
@@ -351,7 +483,25 @@
                 {
                     World world = source.getWorld();
                     BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
+                    //Craftbukkit start - event
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                    org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                    org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                    world.getServer().getPluginManager().callEvent(event);
 
+                    if (event.isCancelled()) return stack;
+                    if (!event.getItem().equals(craftItem)) {
+                        ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                        if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                            idispensebehavior.dispense(source, eventStack);
+                            return stack;
+                        }
+                    }
+
+                    world.captureTreeGeneration = true;
+                    //Craftbukkit end
+
                     if (ItemDye.applyBonemeal(stack, world, blockpos))
                     {
                         if (!world.isRemote)
@@ -364,6 +514,29 @@
                         this.successful = false;
                     }
 
+                    //Lava start - replace capturedBlocks with forge's snapshots
+                    world.captureTreeGeneration = false;
+                    if (world.capturedBlockSnapshots.size() > 0) {
+                        org.bukkit.TreeType treeType = net.minecraft.block.BlockSapling.treeType;
+                        net.minecraft.block.BlockSapling.treeType = null;
+                        java.util.List<net.minecraftforge.common.util.BlockSnapshot> blocks = (java.util.List) world.capturedBlockSnapshots.clone();
+                        java.util.List<org.bukkit.block.BlockState> blockstates = new java.util.ArrayList();
+                        for (net.minecraftforge.common.util.BlockSnapshot snapshot : blocks) {
+                            blockstates.add(new org.bukkit.craftbukkit.block.CraftBlockState(snapshot));
+                        }
+                        world.capturedBlockSnapshots.clear();
+                        org.bukkit.event.world.StructureGrowEvent structureEvent = null;
+                        if (treeType != null) {
+                            structureEvent = new org.bukkit.event.world.StructureGrowEvent(new org.bukkit.Location(world.getWorld(), blockpos.getX(), blockpos.getY(), blockpos.getZ()), treeType, false, null, blockstates);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+                        }
+                        if (structureEvent == null || !structureEvent.isCancelled()) {
+                            for (org.bukkit.block.BlockState blockstate : blockstates) {
+                                blockstate.update(true);
+                            }
+                        }
+                    }
+                    //Lava end
                     return stack;
                 }
                 else
@@ -378,7 +551,27 @@
             {
                 World world = source.getWorld();
                 BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
+                //Lava-test start - add event
+                ItemStack eventStack = stack.copy().splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(eventStack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockpos.getX() + 0.5D, (double) blockpos.getY(), (double) blockpos.getZ() + 0.5D));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                BlockPos posCopy = blockpos;
+                blockpos = new BlockPos(event.getVelocity().getX() - 0.5D, event.getVelocity().getY() - 0.5D, event.getVelocity().getZ() - 0.5D);
+                //Lava-test end
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
+                blockpos = posCopy; //Lava-test - revert back, just in case
                 world.spawnEntity(entitytntprimed);
                 world.playSound((EntityPlayer)null, entitytntprimed.posX, entitytntprimed.posY, entitytntprimed.posZ, SoundEvents.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 stack.shrink(1);
@@ -393,6 +586,23 @@
                 EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 BlockPos blockpos = source.getBlockPos().offset(enumfacing);
                 BlockSkull blockskull = Blocks.SKULL;
+                //Craftbukkit start - event
+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                //Craftbukkit end
+
                 this.successful = true;
 
                 if (world.isAirBlock(blockpos) && blockskull.canDispenserPlace(world, blockpos, stack))
@@ -456,6 +666,23 @@
                 World world = source.getWorld();
                 BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
                 BlockPumpkin blockpumpkin = (BlockPumpkin)Blocks.PUMPKIN;
+                //Craftbukkit start
+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                //Craftbukkit end
+
                 this.successful = true;
 
                 if (world.isAirBlock(blockpos) && blockpumpkin.canDispenserPlace(world, blockpos))
@@ -587,11 +814,31 @@
 
                     d3 = 0.0D;
                 }
+                //Lava-test start - event
+                ItemStack eventStack = stack.copy().splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(eventStack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
+                world.getServer().getPluginManager().callEvent(event);
 
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                d0 = event.getVelocity().getX();
+                d1 = event.getVelocity().getY() - d3;
+                d2 = event.getVelocity().getZ();
+                //Lava-test end
+
                 EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
                 entityboat.setBoatType(this.boatType);
                 entityboat.rotationYaw = enumfacing.getHorizontalAngle();
-                world.spawnEntity(entityboat);
+                if (world.spawnEntity(entityboat)) //Craftbukki - only remove item if the spawn is successful
                 stack.shrink(1);
                 return stack;
             }
@@ -624,6 +871,23 @@
                 World world = source.getWorld();
                 EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 BlockPos blockpos = source.getBlockPos().offset(enumfacing);
+                //Craftbukkit start
+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) return stack;
+                if (!event.getItem().equals(craftItem)) {
+                    ItemStack eventStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.getObject(eventStack.getItem());
+                    if (idispensebehavior != IBehaviorDispenseItem.DEFAULT_BEHAVIOR && idispensebehavior != this) {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+                //Craftbukkit end
+
                 this.successful = world.mayPlace(block, blockpos, false, EnumFacing.DOWN, (Entity)null);
 
                 if (this.successful)
