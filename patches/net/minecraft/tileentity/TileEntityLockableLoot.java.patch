--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityLockableLoot.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityLockableLoot.java
@@ -2,77 +2,69 @@
 
 import java.util.Random;
 import javax.annotation.Nullable;
+
+import com.destroystokyo.paper.loottable.CraftLootableInventory;
+import com.destroystokyo.paper.loottable.CraftLootableInventoryData;
+import com.destroystokyo.paper.loottable.LootableInventory;
+import com.destroystokyo.paper.utils.MCUtil;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.ItemStackHelper;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.ResourceLocation;
+import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.storage.loot.ILootContainer;
 import net.minecraft.world.storage.loot.LootContext;
 import net.minecraft.world.storage.loot.LootTable;
 
-public abstract class TileEntityLockableLoot extends TileEntityLockable implements ILootContainer
-{
+public abstract class TileEntityLockableLoot extends TileEntityLockable implements ILootContainer, CraftLootableInventory { // Paper
     protected ResourceLocation lootTable;
     protected long lootTableSeed;
     protected String customName;
 
-    protected boolean checkLootAndRead(NBTTagCompound compound)
-    {
-        if (compound.hasKey("LootTable", 8))
-        {
+    public TileEntityLockableLoot() {}
+
+    protected boolean checkLootAndRead(NBTTagCompound compound) {
+        if (compound.hasKey("LootTable", 8)) {
             this.lootTable = new ResourceLocation(compound.getString("LootTable"));
             this.lootTableSeed = compound.getLong("LootTableSeed");
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    protected boolean checkLootAndWrite(NBTTagCompound compound)
-    {
-        if (this.lootTable != null)
-        {
+    protected boolean checkLootAndWrite(NBTTagCompound compound) {
+        if (this.lootTable != null) {
             compound.setString("LootTable", this.lootTable.toString());
 
-            if (this.lootTableSeed != 0L)
-            {
+            if (this.lootTableSeed != 0L) {
                 compound.setLong("LootTableSeed", this.lootTableSeed);
             }
 
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public void fillWithLoot(@Nullable EntityPlayer player)
-    {
-        if (this.lootTable != null)
-        {
+    public void fillWithLoot(@Nullable EntityPlayer player) {
+        if (this.lootTable != null) {
             LootTable loottable = this.world.getLootTableManager().getLootTableFromLocation(this.lootTable);
             this.lootTable = null;
             Random random;
 
-            if (this.lootTableSeed == 0L)
-            {
+            if (this.lootTableSeed == 0L) {
                 random = new Random();
-            }
-            else
-            {
+            } else {
                 random = new Random(this.lootTableSeed);
             }
 
-            LootContext.Builder lootcontext$builder = new LootContext.Builder((WorldServer)this.world);
+            LootContext.Builder lootcontext$builder = new LootContext.Builder((WorldServer) this.world);
 
-            if (player != null)
-            {
+            if (player != null) {
                 lootcontext$builder.withLuck(player.getLuck()).withPlayer(player); // Forge: add player to LootContext
             }
 
@@ -80,109 +72,124 @@
         }
     }
 
-    public ResourceLocation getLootTable()
-    {
+    public ResourceLocation getLootTable() {
         return this.lootTable;
     }
 
-    public void setLootTable(ResourceLocation p_189404_1_, long p_189404_2_)
-    {
+    public void setLootTable(ResourceLocation p_189404_1_, long p_189404_2_) {
         this.lootTable = p_189404_1_;
         this.lootTableSeed = p_189404_2_;
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return this.customName != null && !this.customName.isEmpty();
     }
 
-    public void setCustomName(String p_190575_1_)
-    {
+    public void setCustomName(String p_190575_1_) {
         this.customName = p_190575_1_;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
-        this.fillWithLoot((EntityPlayer)null);
-        return (ItemStack)this.getItems().get(index);
+    public ItemStack getStackInSlot(int index) {
+        this.fillWithLoot((EntityPlayer) null);
+        return (ItemStack) this.getItems().get(index);
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        this.fillWithLoot((EntityPlayer)null);
+    public ItemStack decrStackSize(int index, int count) {
+        this.fillWithLoot((EntityPlayer) null);
         ItemStack itemstack = ItemStackHelper.getAndSplit(this.getItems(), index, count);
 
-        if (!itemstack.isEmpty())
-        {
+        if (!itemstack.isEmpty()) {
             this.markDirty();
         }
 
         return itemstack;
     }
 
-    public ItemStack removeStackFromSlot(int index)
-    {
-        this.fillWithLoot((EntityPlayer)null);
+    public ItemStack removeStackFromSlot(int index) {
+        this.fillWithLoot((EntityPlayer) null);
         return ItemStackHelper.getAndRemove(this.getItems(), index);
     }
 
-    public void setInventorySlotContents(int index, @Nullable ItemStack stack)
-    {
-        this.fillWithLoot((EntityPlayer)null);
+    public void setInventorySlotContents(int index, @Nullable ItemStack stack) {
+        this.fillWithLoot((EntityPlayer) null);
         this.getItems().set(index, stack);
 
-        if (stack.getCount() > this.getInventoryStackLimit())
-        {
+        if (stack.getCount() > this.getInventoryStackLimit()) {
             stack.setCount(this.getInventoryStackLimit());
         }
 
         this.markDirty();
     }
 
-    public boolean isUsableByPlayer(EntityPlayer player)
-    {
-        if (this.world.getTileEntity(this.pos) != this)
-        {
+    public boolean isUsableByPlayer(EntityPlayer player) {
+        if (this.world.getTileEntity(this.pos) != this) {
             return false;
+        } else {
+            return player.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D, (double) this.pos.getZ() + 0.5D) <= 64.0D;
         }
-        else
-        {
-            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
-        }
     }
 
-    public void openInventory(EntityPlayer player)
-    {
+    public void openInventory(EntityPlayer player) {
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
+    public void closeInventory(EntityPlayer player) {
     }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return true;
     }
 
-    public int getField(int id)
-    {
+    public int getField(int id) {
         return 0;
     }
 
-    public void setField(int id, int value)
-    {
+    public void setField(int id, int value) {
     }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 0;
     }
 
-    public void clear()
-    {
-        this.fillWithLoot((EntityPlayer)null);
+    public void clear() {
+        this.fillWithLoot((EntityPlayer) null);
         this.getItems().clear();
     }
 
     protected abstract NonNullList<ItemStack> getItems();
+
+    // Paper start - LootTable API
+    private final CraftLootableInventoryData lootableData = new CraftLootableInventoryData(this);
+
+    @Override
+    public CraftLootableInventoryData getLootableData() {
+        return lootableData;
+    }
+
+    @Override
+    public LootableInventory getAPILootableInventory() {
+        return (LootableInventory) getBukkitWorld().getBlockAt(MCUtil.toLocation(world, getPosition())).getState();
+    }
+
+    @Override
+    public World getNMSWorld() {
+        return world;
+    }
+
+    public String getLootTableName() {
+        final ResourceLocation key = getLootTable();
+        return key != null ? key.toString() : null;
+    }
+
+    @Override
+    public String setLootTable(String name, long seed) {
+        String prev = getLootTableName();
+        setLootTable(new ResourceLocation(name), seed);
+        return prev;
+    }
+
+    @Override
+    public void clearLootTable() {
+        this.lootTable = null;
+    }
+    // Paper end
 }
