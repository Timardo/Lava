--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -83,6 +83,7 @@
     private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDimensions = new ArrayList<>(); //Lava - Used to keep track of Bukkit dims
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
@@ -138,6 +139,7 @@
         {
             usedIds.add(id);
         }
+        if (id != -1 && id != 0 && id != 1) registerBukkitDimension(id, type.getName()); // Lava - register Environment to Bukkit, ignore vanilla
     }
 
     /**
@@ -209,11 +211,18 @@
         {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            //Lava start - Handle all worlds for bukkit
+            if (!net.minecraftforge.fml.common.FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.contains(world)) {
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.add(world);
+            }
+            //Lava end
             server.worldTickTimes.put(id, new long[100]);
             FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
         }
         else
         {
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.remove(getWorld(id)); // Lava - remove world from our new world ArrayList
+            ((org.bukkit.craftbukkit.CraftServer)org.bukkit.Bukkit.getServer()).worlds.remove(getWorld(id).getWorld().getName().toLowerCase(java.util.Locale.ENGLISH)); //Lava-test - remove from bukkit's db now
             worlds.remove(id);
             server.worldTickTimes.remove(id);
             FMLLog.log.info("Unloading dimension {}", id);
@@ -257,10 +266,46 @@
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
-        ISaveHandler savehandler = overworld.getSaveHandler();
+        //Lava start - handle dimension initialization TODO check all this world loading stuff
+        //ISaveHandler savehandler = overworld.getSaveHandler();
         //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
-
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        //WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        net.minecraft.world.WorldSettings worldSettings = new net.minecraft.world.WorldSettings(overworld.getWorldInfo());
+        String worldType, name;
+        org.bukkit.World.Environment environment = org.bukkit.World.Environment.getEnvironment(dim);
+        
+        if (dim >= -1 && dim <= 1) {
+            if ((dim == 01 && !mcServer.getAllowNether()) || (dim == 1 && mcServer.server.getAllowEnd())) {
+                return;
+            }
+            
+            worldType = environment.toString().toLowerCase();
+            name = "DIM" + dim;
+        }
+        
+        else {
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
+            
+            if (org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId()) == null)
+            {
+                environment = DimensionManager.registerBukkitDimension(DimensionManager.getProviderType(dim).getId(), worldType);
+            }
+            name = provider.getSaveFolder();
+        }
+        
+        org.bukkit.generator.ChunkGenerator generator = mcServer.server.getGenerator(name);
+        
+        if (mcServer instanceof net.minecraft.server.dedicated.DedicatedServer) {
+            worldSettings.setGeneratorOptions(((net.minecraft.server.dedicated.DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        
+        net.minecraft.world.storage.WorldInfo worldInfo = new net.minecraft.world.storage.WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer) (new WorldServerMulti(mcServer, new net.minecraft.world.chunk.storage.AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, environment, generator).init()));
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+        //Lava end
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
         if (!mcServer.isSinglePlayer())
@@ -499,4 +544,101 @@
             return null;
         }
     }
+
+    //Lava start - methods for world init
+    public static WorldServer initDimension(org.bukkit.WorldCreator creator, net.minecraft.world.WorldSettings worldSettings) {
+        WorldServer overworld = getWorld(0);
+
+        if (overworld == null) {
+            throw new RuntimeException("Cannot hotload dimension: Overworld is not loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+        String name;
+        DimensionType type = DimensionType.OVERWORLD;
+
+        try {
+            if (creator.environment() != null) {
+                type = DimensionType.getById(creator.environment().getId());
+            }
+        } catch (IllegalArgumentException e) {
+        }
+
+        org.bukkit.World.Environment environment = creator.environment();
+        name = creator.name();
+        int dim = 0;
+        net.minecraft.world.chunk.storage.AnvilSaveHandler saveHandler = new net.minecraft.world.chunk.storage.AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer());
+
+        if (saveHandler.loadWorldInfo() != null) {
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if (savedDim != 0 && savedDim != -1 && savedDim != 1) {
+                dim = savedDim;
+            }
+        }
+
+        if (dim == 0) {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) { // Handle reloads properly
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+
+        org.bukkit.generator.ChunkGenerator generator = creator.generator();
+
+        if (mcServer instanceof net.minecraft.server.dedicated.DedicatedServer) {
+            worldSettings.setGeneratorOptions(((net.minecraft.server.dedicated.DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        net.minecraft.world.storage.WorldInfo worldInfo = saveHandler.loadWorldInfo();
+
+        if (worldInfo == null) {
+            worldInfo = new net.minecraft.world.storage.WorldInfo(worldSettings, name);
+        }
+
+        WorldServer world = (WorldServer) new WorldServerMulti(mcServer, saveHandler, dim, overworld, mcServer.profiler, worldInfo, environment, generator).init();
+        world.initialize(worldSettings);
+        world.provider.setDimension(dim);
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        if (!mcServer.isSinglePlayer()) {
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+
+        return world;
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        org.bukkit.World.Environment env = org.bukkit.World.Environment.getEnvironment(dim);
+        if (env == null) {
+            worldType = worldType.replace("WorldProvider", "");
+            env = net.minecraftforge.common.util.EnumHelper.addBukkitEnvironment(dim, worldType.toUpperCase());
+            org.bukkit.World.Environment.registerEnvironment(env);
+        }
+
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim) {
+        if (!bukkitDimensions.contains(dim)) {
+            bukkitDimensions.add(dim);
+        }
+    }
+
+    public static void removeBukkitDimension(int dim) {
+        if (bukkitDimensions.contains(dim)) {
+            bukkitDimensions.remove(dim);
+        }
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs() {
+        return bukkitDimensions;
+    }
+
+    public static boolean isBukkitDimension(int dim) {
+        return bukkitDimensions.contains(dim);
+    }
+    //Lava end
 }
