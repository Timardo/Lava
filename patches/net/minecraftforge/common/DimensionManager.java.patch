--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -47,6 +47,7 @@
 
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.world.DimensionType;
 import net.minecraft.world.MinecraftException;
 import net.minecraft.world.World;
@@ -54,11 +55,18 @@
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldServerMulti;
+import net.minecraft.world.WorldSettings;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
 
 import javax.annotation.Nullable;
+import org.bukkit.WorldCreator;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.generator.ChunkGenerator;
 
 public class DimensionManager
 {
@@ -83,6 +91,7 @@
     private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDimensions = new ArrayList<>(); // Used to keep track of Bukkit dims
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
@@ -138,6 +147,10 @@
         {
             usedIds.add(id);
         }
+        // Lava - register Environment to Bukkit
+        if (id != -1 && id != 0 && id != 1) { // Ignore vanilla
+            registerBukkitDimension(id, type.getName());
+        }
     }
 
     /**
@@ -209,11 +222,16 @@
         {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            // Handle all worlds for bukkit
+            if (!FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.contains(world)) {
+                FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.add(world);
+            }
             server.worldTickTimes.put(id, new long[100]);
             FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
         }
         else
         {
+            FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.remove(getWorld(id)); // Lava - remove world from our new world ArrayList
             worlds.remove(id);
             server.worldTickTimes.remove(id);
             FMLLog.log.info("Unloading dimension {}", id);
@@ -257,12 +275,49 @@
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
-        ISaveHandler savehandler = overworld.getSaveHandler();
-        //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        //ISaveHandler savehandler = overworld.getSaveHandler();
+        WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        
+        //WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        String worldType, name;
+        org.bukkit.World.Environment environment = org.bukkit.World.Environment.getEnvironment(dim);
+        
+        if (dim >= -1 && dim <= 1) {
+            if ((dim == 01 && !mcServer.getAllowNether()) || (dim == 1 && mcServer.server.getAllowEnd())) {
+                return;
+            }
+            
+            worldType = environment.toString().toLowerCase();
+            name = "DIM" + dim;
+        }
+        
+        else {
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
+            
+            if (org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId()) == null)
+            {
+                environment = DimensionManager.registerBukkitDimension(DimensionManager.getProviderType(dim).getId(), worldType);
+            }
 
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+            name = provider.getSaveFolder();
+        }
+        
+        ChunkGenerator generator = mcServer.server.getGenerator(name);
+        
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        
+        WorldInfo worldInfo = new WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer) (new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, environment, generator).init()));
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        mcServer.server.getPluginManager().callEvent(new WorldLoadEvent(world.getWorld()));
+        
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());
@@ -390,7 +445,7 @@
                 FMLLog.log.debug("Aborting unload for dimension {} as status changed", id);
                 continue;
             }
-            try
+            /*try
             {
                 w.saveAllChunks(true, null);
             }
@@ -403,7 +458,8 @@
                 MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
                 w.flush();
                 setWorld(id, null, w.getMinecraftServer());
-            }
+            }*/
+            FMLCommonHandler.instance().getMinecraftServerInstance().server.unloadWorld(w.getWorld(), true); // Lava
         }
     }
 
@@ -487,8 +543,8 @@
         if (DimensionManager.getWorld(0) != null)
         {
             return DimensionManager.getWorld(0).getSaveHandler().getWorldDirectory();
-        }/*
-        else if (MinecraftServer.getServer() != null)
+        }
+        /*else if (MinecraftServer.getServer() != null)
         {
             MinecraftServer srv = MinecraftServer.getServer();
             SaveHandler saveHandler = (SaveHandler) srv.getActiveAnvilConverter().getSaveLoader(srv.getFolderName(), false);
@@ -499,4 +555,99 @@
             return null;
         }
     }
+
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings) {
+        WorldServer overworld = getWorld(0);
+
+        if (overworld == null) {
+            throw new RuntimeException("Cannot hotload dimension: Overworld is not loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+        String name;
+        DimensionType type = DimensionType.OVERWORLD;
+
+        try {
+            if (creator.environment() != null) {
+                type = DimensionType.getById(creator.environment().getId());
+            }
+        } catch (IllegalArgumentException e) {
+        }
+
+        org.bukkit.World.Environment environment = creator.environment();
+        name = creator.name();
+        int dim = 0;
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer());
+
+        if (saveHandler.loadWorldInfo() != null) {
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if (savedDim != 0 && savedDim != -1 && savedDim != 1) {
+                dim = savedDim;
+            }
+        }
+
+        if (dim == 0) {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) { // Handle reloads properly
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+
+        ChunkGenerator generator = creator.generator();
+
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldInfo worldInfo = saveHandler.loadWorldInfo();
+
+        if (worldInfo == null) {
+            worldInfo = new WorldInfo(worldSettings, name);
+        }
+
+        WorldServer world = (WorldServer) new WorldServerMulti(mcServer, saveHandler, dim, overworld, mcServer.profiler, worldInfo, environment, generator).init();
+        world.initialize(worldSettings);
+        world.provider.setDimension(dim);
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        if (!mcServer.isSinglePlayer()) {
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+
+        return world;
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        org.bukkit.World.Environment env = org.bukkit.World.Environment.getEnvironment(dim);
+        if (env == null) {
+            worldType = worldType.replace("WorldProvider", "");
+            env = net.minecraftforge.common.util.EnumHelper.addBukkitEnvironment(dim, worldType.toUpperCase());
+            org.bukkit.World.Environment.registerEnvironment(env);
+        }
+
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim) {
+        if (!bukkitDimensions.contains(dim)) {
+            bukkitDimensions.add(dim);
+        }
+    }
+
+    public static void removeBukkitDimension(int dim) {
+        if (bukkitDimensions.contains(dim)) {
+            bukkitDimensions.remove(dim);
+        }
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs() {
+        return bukkitDimensions;
+    }
+
+    public static boolean isBukkitDimension(int dim) {
+        return bukkitDimensions.contains(dim);
+    }
 }
