--- ../src-base/minecraft/net/minecraftforge/common/util/FakePlayerFactory.java
+++ ../src-work/minecraft/net/minecraftforge/common/util/FakePlayerFactory.java
@@ -31,19 +31,16 @@
 import net.minecraft.world.WorldServer;
 
 //To be expanded for generic Mod fake players?
-public class FakePlayerFactory
-{
+public class FakePlayerFactory {
     private static GameProfile MINECRAFT = new GameProfile(UUID.fromString("41C82C87-7AfB-4024-BA57-13D2C99CAE77"), "[Minecraft]");
     // Map of all active fake player usernames to their entities
-    private static Map<GameProfile, FakePlayer> fakePlayers = Maps.newHashMap();
+    public static Map<GameProfile, FakePlayer> fakePlayers = Maps.newHashMap();
     private static WeakReference<FakePlayer> MINECRAFT_PLAYER = null;
 
-    public static FakePlayer getMinecraft(WorldServer world)
-    {
+    public static FakePlayer getMinecraft(WorldServer world) {
         FakePlayer ret = MINECRAFT_PLAYER != null ? MINECRAFT_PLAYER.get() : null;
-        if (ret == null)
-        {
-            ret = FakePlayerFactory.get(world,  MINECRAFT);
+        if (ret == null) {
+            ret = FakePlayerFactory.get(world, MINECRAFT);
             MINECRAFT_PLAYER = new WeakReference<FakePlayer>(ret);
         }
         return ret;
@@ -54,25 +51,32 @@
      * Mods should either hold weak references to the return value, or listen for a
      * WorldEvent.Unload and kill all references to prevent worlds staying in memory.
      */
-    public static FakePlayer get(WorldServer world, GameProfile username)
-    {
-        if (!fakePlayers.containsKey(username))
-        {
-            FakePlayer fakePlayer = new FakePlayer(world, username);
-            fakePlayers.put(username, fakePlayer);
+    public static FakePlayer get(WorldServer world, GameProfile username) {
+        // Cauldron start - Refactored below to avoid a hashCode check with a null GameProfile ID
+        if (username == null || username.getName() == null) return null;
+        for (Map.Entry<GameProfile, FakePlayer> mapEntry : fakePlayers.entrySet()) {
+            GameProfile gameprofile = mapEntry.getKey();
+            if (gameprofile.getName().equals(username.getName())) {
+                return mapEntry.getValue();
+            }
         }
 
+        FakePlayer fakePlayer = new FakePlayer(world, username);
+        if (username.getId() == null) // GameProfile hashCode check will fail with a null ID
+        {
+            username = new GameProfile(UUID.randomUUID(), username.getName()); // Create new GameProfile with random UUID
+        }
+        // Cauldron end
+        fakePlayers.put(username, fakePlayer);
         return fakePlayers.get(username);
     }
 
-    public static void unloadWorld(WorldServer world)
-    {
+    public static void unloadWorld(WorldServer world) {
         fakePlayers.entrySet().removeIf(entry -> entry.getValue().world == world);
         if (MINECRAFT_PLAYER != null && MINECRAFT_PLAYER.get() != null && MINECRAFT_PLAYER.get().world == world) // This shouldn't be strictly necessary, but lets be aggressive.
         {
             FakePlayer mc = MINECRAFT_PLAYER.get();
-            if (mc != null && mc.world == world)
-            {
+            if (mc != null && mc.world == world) {
                 MINECRAFT_PLAYER = null;
             }
         }
