--- ../src-base/minecraft/net/minecraftforge/oredict/ShapedOreRecipe.java
+++ ../src-work/minecraft/net/minecraftforge/oredict/ShapedOreRecipe.java
@@ -19,39 +19,35 @@
 
 package net.minecraftforge.oredict;
 
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
 import net.minecraft.block.Block;
-import net.minecraft.item.crafting.IRecipe;
-import net.minecraft.item.crafting.Ingredient;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.item.crafting.IRecipe;
+import net.minecraft.item.crafting.Ingredient;
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
-import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.crafting.CraftingHelper;
 import net.minecraftforge.common.crafting.CraftingHelper.ShapedPrimer;
 import net.minecraftforge.common.crafting.IShapedRecipe;
-import net.minecraftforge.registries.IForgeRegistryEntry;
 import net.minecraftforge.common.crafting.JsonContext;
+import net.minecraftforge.registries.IForgeRegistryEntry;
+import org.bukkit.inventory.Recipe;
 
+import javax.annotation.Nonnull;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSyntaxException;
-
-public class ShapedOreRecipe extends IForgeRegistryEntry.Impl<IRecipe> implements IShapedRecipe
-{
+public class ShapedOreRecipe extends IForgeRegistryEntry.Impl<IRecipe> implements IShapedRecipe {
     @Deprecated
     public static final int MAX_CRAFT_GRID_WIDTH = 3;
     @Deprecated
@@ -65,11 +61,19 @@
     protected boolean mirrored = true;
     protected ResourceLocation group;
 
-    public ShapedOreRecipe(ResourceLocation group, Block     result, Object... recipe){ this(group, new ItemStack(result), recipe); }
-    public ShapedOreRecipe(ResourceLocation group, Item      result, Object... recipe){ this(group, new ItemStack(result), recipe); }
-    public ShapedOreRecipe(ResourceLocation group, @Nonnull ItemStack result, Object... recipe) { this(group, result, CraftingHelper.parseShaped(recipe)); }
-    public ShapedOreRecipe(ResourceLocation group, @Nonnull ItemStack result, ShapedPrimer primer)
-    {
+    public ShapedOreRecipe(ResourceLocation group, Block result, Object... recipe) {
+        this(group, new ItemStack(result), recipe);
+    }
+
+    public ShapedOreRecipe(ResourceLocation group, Item result, Object... recipe) {
+        this(group, new ItemStack(result), recipe);
+    }
+
+    public ShapedOreRecipe(ResourceLocation group, @Nonnull ItemStack result, Object... recipe) {
+        this(group, result, CraftingHelper.parseShaped(recipe));
+    }
+
+    public ShapedOreRecipe(ResourceLocation group, @Nonnull ItemStack result, ShapedPrimer primer) {
         this.group = group;
         output = result.copy();
         this.width = primer.width;
@@ -80,26 +84,25 @@
 
     @Override
     @Nonnull
-    public ItemStack getCraftingResult(@Nonnull InventoryCrafting var1){ return output.copy(); }
+    public ItemStack getCraftingResult(@Nonnull InventoryCrafting var1) {
+        return output.copy();
+    }
 
     @Override
     @Nonnull
-    public ItemStack getRecipeOutput(){ return output; }
+    public ItemStack getRecipeOutput() {
+        return output;
+    }
 
     @Override
-    public boolean matches(@Nonnull InventoryCrafting inv, @Nonnull World world)
-    {
-        for (int x = 0; x <= inv.getWidth() - width; x++)
-        {
-            for (int y = 0; y <= inv.getHeight() - height; ++y)
-            {
-                if (checkMatch(inv, x, y, false))
-                {
+    public boolean matches(@Nonnull InventoryCrafting inv, @Nonnull World world) {
+        for (int x = 0; x <= inv.getWidth() - width; x++) {
+            for (int y = 0; y <= inv.getHeight() - height; ++y) {
+                if (checkMatch(inv, x, y, false)) {
                     return true;
                 }
 
-                if (mirrored && checkMatch(inv, x, y, true))
-                {
+                if (mirrored && checkMatch(inv, x, y, true)) {
                     return true;
                 }
             }
@@ -111,30 +114,22 @@
     /**
      * Based on {@link net.minecraft.item.crafting.ShapedRecipes#checkMatch(InventoryCrafting, int, int, boolean)}
      */
-    protected boolean checkMatch(InventoryCrafting inv, int startX, int startY, boolean mirror)
-    {
-        for (int x = 0; x < inv.getWidth(); x++)
-        {
-            for (int y = 0; y < inv.getHeight(); y++)
-            {
+    protected boolean checkMatch(InventoryCrafting inv, int startX, int startY, boolean mirror) {
+        for (int x = 0; x < inv.getWidth(); x++) {
+            for (int y = 0; y < inv.getHeight(); y++) {
                 int subX = x - startX;
                 int subY = y - startY;
                 Ingredient target = Ingredient.EMPTY;
 
-                if (subX >= 0 && subY >= 0 && subX < width && subY < height)
-                {
-                    if (mirror)
-                    {
+                if (subX >= 0 && subY >= 0 && subX < width && subY < height) {
+                    if (mirror) {
                         target = input.get(width - subX - 1 + subY * width);
-                    }
-                    else
-                    {
+                    } else {
                         target = input.get(subX + subY * width);
                     }
                 }
 
-                if (!target.apply(inv.getStackInRowAndColumn(x, y)))
-                {
+                if (!target.apply(inv.getStackInRowAndColumn(x, y))) {
                     return false;
                 }
             }
@@ -143,65 +138,55 @@
         return true;
     }
 
-    public ShapedOreRecipe setMirrored(boolean mirror)
-    {
+    public ShapedOreRecipe setMirrored(boolean mirror) {
         mirrored = mirror;
         return this;
     }
 
     @Override
     @Nonnull
-    public NonNullList<Ingredient> getIngredients()
-    {
+    public NonNullList<Ingredient> getIngredients() {
         return this.input;
     }
 
     @Deprecated //Use IShapedRecipe.getRecipeWidth
-    public int getWidth()
-    {
+    public int getWidth() {
         return width;
     }
 
     @Override
-    public int getRecipeWidth()
-    {
+    public int getRecipeWidth() {
         return this.getWidth();
     }
 
     @Deprecated //Use IShapedRecipe.getRecipeHeight
-    public int getHeight()
-    {
+    public int getHeight() {
         return height;
     }
 
     @Override
-    public int getRecipeHeight()
-    {
+    public int getRecipeHeight() {
         return this.getHeight();
     }
 
     @Override
     @Nonnull
-    public String getGroup()
-    {
+    public String getGroup() {
         return this.group == null ? "" : this.group.toString();
     }
 
     @Override
-    public boolean canFit(int p_194133_1_, int p_194133_2_)
-    {
+    public boolean canFit(int p_194133_1_, int p_194133_2_) {
         return p_194133_1_ >= this.width && p_194133_2_ >= this.height;
     }
 
-    public static ShapedOreRecipe factory(JsonContext context, JsonObject json)
-    {
+    public static ShapedOreRecipe factory(JsonContext context, JsonObject json) {
         String group = JsonUtils.getString(json, "group", "");
         //if (!group.isEmpty() && group.indexOf(':') == -1)
         //    group = context.getModId() + ":" + group;
 
         Map<Character, Ingredient> ingMap = Maps.newHashMap();
-        for (Entry<String, JsonElement> entry : JsonUtils.getJsonObject(json, "key").entrySet())
-        {
+        for (Entry<String, JsonElement> entry : JsonUtils.getJsonObject(json, "key").entrySet()) {
             if (entry.getKey().length() != 1)
                 throw new JsonSyntaxException("Invalid key entry: '" + entry.getKey() + "' is an invalid symbol (must be 1 character only).");
             if (" ".equals(entry.getKey()))
@@ -218,8 +203,7 @@
             throw new JsonSyntaxException("Invalid pattern: empty pattern not allowed");
 
         String[] pattern = new String[patternJ.size()];
-        for (int x = 0; x < pattern.length; ++x)
-        {
+        for (int x = 0; x < pattern.length; ++x) {
             String line = JsonUtils.getString(patternJ.get(x), "pattern[" + x + "]");
             if (x > 0 && pattern[0].length() != line.length())
                 throw new JsonSyntaxException("Invalid pattern: each row must  be the same width");
@@ -236,10 +220,8 @@
         keys.remove(' ');
 
         int x = 0;
-        for (String line : pattern)
-        {
-            for (char chr : line.toCharArray())
-            {
+        for (String line : pattern) {
+            for (char chr : line.toCharArray()) {
                 Ingredient ing = ingMap.get(chr);
                 if (ing == null)
                     throw new JsonSyntaxException("Pattern references symbol '" + chr + "' but it's not defined in the key");
@@ -254,4 +236,13 @@
         ItemStack result = CraftingHelper.getItemStack(JsonUtils.getJsonObject(json, "result"), context);
         return new ShapedOreRecipe(group.isEmpty() ? null : new ResourceLocation(group), result, primer);
     }
+
+    @Override
+    public Recipe toBukkitRecipe() {
+        throw new UnsupportedOperationException("Cannot get Bukkit Recipe from ShapedOreRecipe");
+    }
+
+    @Override
+    public void setKey(ResourceLocation key) {
+    }
 }
